/******************************************************************************
 * Software License Agreement
 *
 * Copyright (c) 2016, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of the copyright holders nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission

 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share
 * modifications, enhancements or bug fixes with Infineon Technologies AG
 * (dave@infineon.com).
 *
 *****************************************************************************/

/****************************************************************
 * HEADER FILES
 ***************************************************************/
#include <DAVE.h>
#include "port.h"
#include "mbutils.h"
#include "mb.h"
#include<probe_scope.h>
#include<math.h>
#include<stdlib.h>
#include<definitions.h>
#include<functions.h>


/****************************************************************
 * MACROS AND DEFINES
 ***************************************************************/
/* Input Register Definition (16 bit; Read-Only) */
/* Input Register Start Address */
#define REG_INPUT_START_ADDR 10U
/* No of Input Registers*/
#define REG_INPUT_COUNT 10U

/* Holding Register Definition (16 bit; Read-Write) */
/* Holding Register Start Address */
#define REG_HOLDING_START_ADDR 1U
/* No of Holding Registers */
#define REG_HOLDING_COUNT 130U

/* Coil Register Definition (1 bit; Read-Write) */
/* Coil Register Start Address */
#define REG_COILS_START_ADDR 1000U
/* No of Coil Registers*/
#define REG_COILS_COUNT 16U

/* Discrete Inputs Definition (1 bit; Read-Only) */
/* Discrete Inputs Start Address */
#define REG_DISC_START_ADDR 2000U
/* No of Discrete Inputs */
#define REG_DISC_COUNT 16U


#define NUM_FILTERS 10 //Number of filters used
#define K23     0.66666666666666666666666666666667f
#define Ksqr32  0.86602540378443864676372317075294f
#define K23sqr3 0.38490017945975050967276585366797f
#define PI      3.1415926535897932384626433832795f
#define PI2     6.283185307179586476925286766559f

void init_filters(void);
float filter_500hz(float input_value, int filter_number);
float filter_50hz(float input_value, int filter_number);
float filter_5hz(float input_value, int filter_number);

/******************************************/
/********** Filters' variables ************/
float value_ant1[NUM_FILTERS];
float value_filt_ant1[NUM_FILTERS];
float value_filt[NUM_FILTERS];


// VMORAIS

float i_alfa, i_beta, v_alfa, v_beta;
float van, vbn, vcn;
float V_abc[3]={0.0f, 0.0f, 0.0f};	// AC voltages
float I_abc[3]={0.0f, 0.0f, 0.0f};	// AC currents
float V_AB[2]={0.0f, 0.0f};			// alpha beta voltage
float I_AB[2]={0.0f, 0.0f};			// alpha beta current

float active_power = 0.0f, reactive_power = 0.0f;
float angle, aux, aux2 = 0.0f, aux3;

/****************************************************************
 * LOCAL DATA
 ***************************************************************/
/* Allocate buffer for Input Register (16bit; Read-Only) */
static uint16_t reg_input_buffer[REG_INPUT_COUNT];
/* Allocate buffer for Holding Register (16bit; Read-Write) */
static uint16_t reg_holding_buffer[REG_HOLDING_COUNT];
/* Allocate buffer for discrete input register (1bit; Read-Only) */
static uint8_t reg_discrete_input_buffer[ (((uint16_t)REG_DISC_COUNT-1U) / 8U) + 1U];
/* Allocate buffer for coil register (1bit; Read-Write) */
static uint8_t reg_coils_buffers[ (((uint16_t)REG_COILS_COUNT-1U) / 8U) + 1U];


/****************************************************************
 * Analysis Variables
 ***************************************************************/
float IA[FFTSIZE],VPARK[FFTSIZE],FFTVector[FFTSIZE],MagVector[HFFTSIZE];
float IDaux,IQaux,IAaux,IBaux,ICaux,VPARKaux;
float VAaux,VBaux,VCaux;
float FFTPARKavg,FFTPARKMagSum=0,SCMag=0,SCSeverity=0;//EPVA analysis variables

float FFTIAMagSum=0,BRBMag=0;//Current analysis variables
float magzero,magzeroEPVA;// DC components from the FFT of the motor current and the EPVA
float fsfreq,brbfreq,FsMag,SCBinFreq; // This variables are used to test the search for specific frequencies and can be deleted.

/* Array that stores the sum of the current magnitude values for the short circuit phase identification
 * SumI[0]= Sum of IA
 * SumI[1]= Sum of IB
 * SumI[2]= Sum of IC
 * */
float SumI[3]={0};

/*Result Array the important values are stored here description of each value below.
 * RA[0]= FFTPARKavg, which is the the average of the Fourier Transform of the module of ID and IQ.
 * RA[1]= SCMag, which is the value of the magnitude of the frequency associated with short circuits.
 * RA[2]= SCSeverity, which is the SCMag divided by the DC component of the EPVA.
 * RA[3]= BRBMag, which is the magnitude of the frequency associated with broken rotor bars.
 * */
float RA[4];

/*Error Array in which each bin represents the presence or absence of a specific error.
 * ERRORPRESENT[0]= FFTPARKavg ERROR, which is 0 is the FFTPARKavg does not pass the limit and 1 is it does.
 * ERRORPRESENT[1]= SCMAg ERROR, which is 0 is the SCMag does not pass the limit and 1 is it does.
 * ERRORPRESENT[2]= SCPhase, which is 1 if the short circuit is in phase A , 2 if in B, 3 if in C and 0 if there is no short circuit.
 * ERRORPRESENT[3]= BRBMag ERROR, which is 0 is the BRBMag does not pass the limit and 1 is it does.
 * */
int ERRORPRESENT[4];

uint32_t i=0u;
arm_rfft_fast_instance_f32 VPfftinstance;

//Test Variables can be Deleted
float32_t maxValue,maxValueEPVA;
uint32_t maxIndex,maxIndexEPVA;

/***************************************************************/

/****************************************************************
 * API PROTOTYPES
 ***************************************************************/
void readbuttons(void);
void Rx_Cb(void);
void Tx_Cb(void);

/****************************************************************
 * API IMPLEMENTATION
 ***************************************************************/
/**
 * @eMBRegInputCB
 *
 * Callback function called by the protocol stack for reading the 16bit value of input
 * register(s)
 *
 * @input :  - buffer  : Pointer to a buffer which is used to return the
 *                        current value of the modbus input registers to the stack.
 *           - address : Starting address of the registers.
 *           - count   : Number of registers to be returned.
 *
 * @output : - buffer  : Buffer which is updated with the modbus input registers.
 *
 * @return : MB_ENOERR if success
 *           MB_ENOREG if failure (illegal register access)
 *
 * */
eMBErrorCode eMBRegInputCB( uint8_t *buffer, uint16_t address, uint16_t count )
{
	eMBErrorCode status = MB_ENOERR;
	uint16_t     register_index;

	if (( address >= (uint16_t)REG_INPUT_START_ADDR )
			&& ( (uint16_t)(address + count) <= (uint16_t)(REG_INPUT_START_ADDR + REG_INPUT_COUNT) ))
	{
		register_index = ( uint16_t )( address - REG_INPUT_START_ADDR );
		while( count > 0U )
		{
			/* Pass current register values to the protocol stack. */
			*buffer = ( uint8_t )( reg_input_buffer[register_index] >> 8 );
			buffer++;
			*buffer = ( uint8_t )( reg_input_buffer[register_index] & 0xFFU );
			buffer++;
			register_index++;
			count--;
		}
	}
	else
	{
		status = MB_ENOREG;
	}
	return status;
}

/**
 * @eMBRegHoldingCB
 *
 * Callback function called by the protocol stack for reading/writing the 16bit value of
 * holding register(s)
 *
 * @input :  - buffer  : Pointer to a buffer which is used to exchange (read/write)
 *                       current value of the modbus holding registers with the protocol stack.
 *           - address : Starting address of the register(s).
 *           - count   : Number of registers to be exchanged (read/write).
 *           - mode    : MB_REG_WRITE Protocol stack is writing input register(s).
 *                       MB_REG_READ  Protocol stack is reading input register(s).
 *
 * @output : - buffer  : Buffer which is updated with the modbus holding registers.
 *
 * @return:  MB_ENOERR if success
 *           MB_ENOREG if failure (illegal register access)
 *
 * */
eMBErrorCode eMBRegHoldingCB( uint8_t *buffer, uint16_t address, uint16_t count, eMBRegisterMode mode )
{
	eMBErrorCode status = MB_ENOERR;
	uint16_t register_index;

	if ( ( address >= REG_HOLDING_START_ADDR ) &&
			( (uint16_t)(address + count) <= (uint16_t)(REG_HOLDING_START_ADDR + REG_HOLDING_COUNT)) )
	{
		register_index = ( uint16_t )( address - REG_HOLDING_START_ADDR );
		switch ( mode )
		{
		/* Pass current register values to the protocol stack. */
		case MB_REG_READ:
			while( count > 0U )
			{
				*buffer = (uint8_t)( reg_holding_buffer[register_index] >> 8 );
				buffer++;
				*buffer = (uint8_t)( reg_holding_buffer[register_index] & 0xFFU );
				buffer++;
				register_index++;
				count--;
			}
			break;
			/* Update current register values with new values from the
			 * protocol stack. */
		case MB_REG_WRITE:
			while( count > 0U )
			{
				reg_holding_buffer[register_index] =(uint16_t)((uint16_t)*buffer << 8);
				buffer++;
				reg_holding_buffer[register_index] |= *buffer;
				buffer++;
				register_index++;
				count--;\
			}
			break;
		default:
			status = MB_ENOREG;
			break;
		}
	}
	else
	{
		status = MB_ENOREG;
	}
	return status;
}

/**
 * @eMBRegCoilsCB
 *
 * Callback function called by the protocol stack for reading/writing the 1bit value of coil register(s)
 *
 * @input :  - buffer  : Pointer to a buffer which is used to exchange (read/write)
 *                       current value of the modbus coil regitser(s) with the protocol stack.
 *           - address : Starting address of the register(s).
 *           - count   : Number of registers bits to be exchanged (read/write).
 *           - mode    : MB_REG_WRITE Protocol stack is writing coil register(s).
 *                       MB_REG_READ  Protocol stack is reading coil register(s).
 *
 * @output : - buffer  : Buffer which is updated with the modbus coil register(s).
 *
 * @return:  MB_ENOERR if success
 *           MB_ENOREG if failure (illegal register access)
 *
 * */
eMBErrorCode eMBRegCoilsCB( uint8_t *buffer, uint16_t address, uint16_t count, eMBRegisterMode mode )
{
	eMBErrorCode status = MB_ENOERR;
	int16_t signed_count = (int16_t)count;
	uint16_t bit_offset;

	/* Check if we have registers mapped at this block. */
	if( ( address >= REG_COILS_START_ADDR ) &&
			( (uint16_t)(address + count) <= (uint16_t)(REG_COILS_START_ADDR + REG_COILS_COUNT)) )
	{
		bit_offset = ( uint16_t )( address - REG_COILS_START_ADDR );
		switch ( mode )
		{
		/* Read current values and pass to protocol stack. */
		case MB_REG_READ:
			while( signed_count > 0 )
			{
				if (signed_count > 8)
				{
					*buffer = xMBUtilGetBits( reg_coils_buffers, bit_offset, 8U);
				}
				else
				{
					*buffer = xMBUtilGetBits( reg_coils_buffers, bit_offset, (uint8_t)signed_count);
				}
				buffer++;
				signed_count -= 8;
				bit_offset += 8U;
			}
			break;
			/* Update current register values. */
		case MB_REG_WRITE:
			while( signed_count > 0 )
			{
				if (signed_count > 8)
				{
					xMBUtilSetBits( reg_coils_buffers, bit_offset, 8U, *buffer );
				}
				else
				{
					xMBUtilSetBits( reg_coils_buffers, bit_offset, (uint8_t)signed_count, *buffer );
				}
				buffer++;
				signed_count -= 8;
				bit_offset += (uint8_t)8;
			}
			break;
		default:
			status = MB_ENOREG;
			break;
		}
	}
	else
	{
		status = MB_ENOREG;
	}
	return status;
}

/**
 * @eMBRegDiscreteCB
 *
 * Callback function called by the protocol stack for reading the 1bit value of discrete register(s)
 *
 * @input :  - buffer  : Pointer to a buffer which is used to return the
 *                       current value of the modbus discrete registers to the stack.
 *           - address : Starting address of the registers.
 *           - count   : Number of register bits to be returned.
 *
 * @output : - buffer  : Buffer which is updated with the modbus discrete registers.
 *
 * @return : MB_ENOERR if success
 *           MB_ENOREG if failure (illegal register access)
 *
 * */
eMBErrorCode eMBRegDiscreteCB( uint8_t *buffer, uint16_t address, uint16_t count )
{
	eMBErrorCode status = MB_ENOERR;
	int16_t signed_count = (int16_t)count;
	uint16_t bit_offset;

	/* Check if we have registers mapped at this block. */
	if( ( address >= REG_DISC_START_ADDR ) &&
			( (uint16_t)(address + count) <= (uint16_t)(REG_DISC_START_ADDR + REG_DISC_COUNT)) )
	{
		bit_offset = (uint16_t)( address - REG_DISC_START_ADDR );
		while( signed_count > 0 )
		{
			if (signed_count > 8)
			{
				*buffer = xMBUtilGetBits( reg_discrete_input_buffer, bit_offset, 8U );
			}
			else
			{
				*buffer = xMBUtilGetBits( reg_discrete_input_buffer, bit_offset, (uint8_t)signed_count);
			}
			buffer++;
			signed_count -= 8;
			bit_offset += (uint8_t)8;
		}
	}
	else
	{
		status = MB_ENOREG;
	}
	return status;
}

/**
 * @readbuttons
 *
 * Checks state of button1 and button2 and
 * sets bit0 and bit1 of discrete input registers accordingly
 *
 * @input :  none
 *
 * @output : none
 *
 * @return : none
 *
 * */
void readbuttons(void)
{
	/* Read input of button 1 and store inside bit 0 of discrete input registers */
	if (XMC_GPIO_GetInput(P15_13))
	{
		xMBUtilSetBits( reg_discrete_input_buffer, 0U, 1U, 1U );    /* Set bit 0 to 1b. */
	}
	else
	{
		xMBUtilSetBits( reg_discrete_input_buffer, 0U, 1U, 0U );    /* Set bit 0 to 0b. */
	}

	/* Read input of button 2 and store inside bit 1 of discrete input registers */
	if (XMC_GPIO_GetInput(P15_12))
	{
		xMBUtilSetBits( reg_discrete_input_buffer, 1U, 1U, 1U );    /* Set bit 1 to 1b. */
	}
	else
	{
		xMBUtilSetBits( reg_discrete_input_buffer, 1U, 1U, 0U );    /* Set bit 1 to 0b. */
	}
}


//Motor Analysis Function
void ADC_READ_VOLTAGE(void){
	DIGITAL_IO_SetOutputHigh(&P_1_0);
	IAaux=(((float)(ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_V_D)*ADC_CONVERT))-OFFSETADC);
	IBaux=(((float)(ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_V_F)*ADC_CONVERT))-OFFSETADC);
	ICaux=(((float)(ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_V_E)*ADC_CONVERT))-OFFSETADC);

	//29.6875
	IAaux *= 29.6875;
	IBaux *= 29.6875;
	ICaux *= 29.6875;
	//IAaux *= 2;   //TODO: verificar
	//IBaux *= 2;   //TODO: verificar
	//ICaux *= 2;   //TODO: verificar

	VAaux=(((float)(ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_V_A)*ADC_CONVERT))-OFFSETADC);
	VBaux=(((float)(ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_V_B)*ADC_CONVERT))-OFFSETADC);
	VCaux=(((float)(ADC_MEASUREMENT_ADV_GetResult(&ADC_MEASUREMENT_V_C)*ADC_CONVERT))-OFFSETADC);

	//342.181079796
	VAaux *= 342.181079796;
	VBaux *= 342.181079796;
	VCaux *= 342.181079796;

	VAaux = filter_500hz(VAaux, 0);
	VBaux = filter_500hz(VBaux, 1);
	VCaux = filter_500hz(VCaux, 2);

	IAaux = filter_500hz(IAaux, 3);
	IBaux = filter_500hz(IBaux, 4);
	ICaux = filter_500hz(ICaux, 5);


	I_abc[0] = IAaux;
	I_abc[1] = IBaux;
	I_abc[2] = ICaux;
	abc_AB(I_abc, I_AB);

	V_abc[0] = VCaux;
	//V_abc[1] = VBaux;
	//V_abc[2] = VCaux;
	V_abc[1] = VAaux;
	V_abc[2] = VBaux;
	abc_AB_Dy(V_abc, V_AB);

	i_alfa = I_AB[0];
	i_beta = I_AB[1];
	v_alfa = -V_AB[0];
	v_beta = V_AB[1];


	angle = atan2f(v_beta, v_alfa);
	aux = angle * 5;
	aux -= aux2;
	aux2 = (aux > PI) ? aux2 + PI2 : aux2  ;
	//aux = (aux > PI) ? aux :  ;

	active_power = v_alfa*i_alfa + v_beta*i_beta;
	reactive_power = v_beta*i_alfa - v_alfa*i_beta;

	active_power *= 3;
	reactive_power *= 3;

	active_power   = filter_5hz(active_power, 6);
	reactive_power = filter_5hz(reactive_power, 7);


	DIGITAL_IO_SetOutputLow(&P_1_0);
}



/**
 * @brief
 *
 * Initialize Modbus RTU or ASCII mode, baudrate and device address. Enables the
 * modbus stack.
 *
 *
 * */
int32_t main(void)
{
	/*Initialize DAVE */
	init_filters();

	if(DAVE_Init() == DAVE_STATUS_FAILURE)
	{
		/* Placeholder for error handler code.*/
		XMC_DEBUG(("DAVE APPs initialization failed\n"));
		while(1U)
		{
			/* do nothing */
		}
	}

	ProbeScope_Init(SystemCoreClock/TICKS_PER_SECOND);

	/* INITIALIZE BUTTON1 ON PORT 5.13 FOR INPUT */
	/* Set mode to input tristate */
	XMC_GPIO_SetMode(P15_13, XMC_GPIO_MODE_INPUT_TRISTATE);
	/* Enable digital input. Only needed because P15.13 is an analog port */
	XMC_GPIO_EnableDigitalInput(P15_13);
	/* INITIALIZE BUTTON2 ON PORT 5.12 FOR INPUT */
	/* Set mode to input tristate */
	XMC_GPIO_SetMode(P15_12, XMC_GPIO_MODE_INPUT_TRISTATE);
	/* Enable digital input. Only needed because P15.12 is an analog port */
	XMC_GPIO_EnableDigitalInput(P15_12);

	/* Set FIFO trigger limits */
	UART_SetRXFIFOTriggerLimit (&UART_0, (uint32_t)0);
	UART_SetTXFIFOTriggerLimit (&UART_0, (uint32_t)1);

	/* Register UART_0 interface for modbus usage */
	MB_register_UART(&UART_0);

	/* Initialization of modbus in RTU mode */
	(void)eMBInit( MB_RTU,      /*eMode (MB_ASCII or MB_RTU*/
			(uint8_t)0x01,     /*ucSlaveAddress*/
			(uint8_t)0,        /*ignored*/
			(uint8_t)115200,   /*ulBaudRate*/
			(eMBParity)0       /*ignored*/
	);
	/*Enable modbus protocol stack.*/
	(void)eMBEnable();

	/* Initialise the discrete input registers with zero's and one's
	 * for demonstration purpose within this example. */
	xMBUtilSetBits( reg_discrete_input_buffer, (uint16_t)2, (uint8_t)2, (uint8_t)3 );    /* Set bit 2:3 to 11b. */
	xMBUtilSetBits( reg_discrete_input_buffer, (uint16_t)8, (uint8_t)1, (uint8_t)1 );    /* Set bit 8 to 1b. */

	/* Modbus polling loop waiting for an Event*/
	for( ;; )
	{
		ProbeScope_Sampling();
		/* Process modbus protocol stack */
		(void)eMBPoll();

		/*The first 3 buffers are the number of registers that will be send the machine address and the third is not used
		 *The  values are multiplied by 10e6  in order for a better resolution except RA[3] which is multiplied by 10e5
		 *so it doesn't pass the 16 bit limit this numbers should be adjusted to the expected readings.
		 */
		reg_holding_buffer[1]=8;
		reg_holding_buffer[2]=0x1E;
		reg_holding_buffer[3]=0;
		reg_holding_buffer[4]=(int)(RA[0]*1000000);
		reg_holding_buffer[5]=ERRORPRESENT[0];
		reg_holding_buffer[6]=(int)(RA[1]*1000000);
		reg_holding_buffer[7]=ERRORPRESENT[1];
		reg_holding_buffer[8]=ERRORPRESENT[2];
		reg_holding_buffer[9]=(int)(RA[2]*1000000);
		reg_holding_buffer[10]=(int)(RA[3]*100000);
		reg_holding_buffer[11]=ERRORPRESENT[3];

	}
}

/* Callback handler of UART receiving */
void Rx_Cb(void)
{
	MB_RxHandler();
}

/* Callback handler of UART transmitting */
void Tx_Cb(void)
{
	MB_TxHandler();
}



void init_filters(void) {
	int aux_i = 0;
	for (aux_i = 0; aux_i < NUM_FILTERS; aux_i++) {
		value_ant1[aux_i] = 0;
		value_filt_ant1[aux_i] = 0;
		value_filt[aux_i] = 0;
	}
}

float filter_5hz(float input_value, int filter_number) {
	//Filtro a 500Hz primeira ordem: coeficientes obtidos em filtro.m
	//Values(i) = (b(1)*signal(i)+b(2)*signal(i-1)-a(2)*values(i-1))/a(1);

	//A1 = 1
	//A2 = -0.996863331833438
	//B1 = 0.001568334083281
	//B2 = 0.001568334083281
	//value_filt[filter_number] = ( (B1*input_value + B2*value_ant1[filter_number] - A2*value_filt_ant1[filter_number]));
	value_filt[filter_number] = ((0.001568334083281 * input_value + 0.001568334083281 * value_ant1[filter_number] + 0.996863331833438 * value_filt_ant1[filter_number]));
	value_ant1[filter_number] = input_value;
	value_filt_ant1[filter_number] = value_filt[filter_number];
	return value_filt[filter_number];
}

float filter_50hz(float input_value, int filter_number) {
	//Filtro a 500Hz primeira ordem: coeficientes obtidos em filtro.m
	//Values(i) = (b(1)*signal(i)+b(2)*signal(i-1)-a(2)*values(i-1))/a(1);

	//A1 = 1
	//A2 = -0.969067417193793
	//B1 = 0.015466291403103
	//B2 = 0.015466291403103
	//value_filt[filter_number] = ( (B1*input_value + B2*value_ant1[filter_number] - A2*value_filt_ant1[filter_number]));
	value_filt[filter_number] = ((0.015466291403103 * input_value + 0.015466291403103 * value_ant1[filter_number] + 0.969067417193793 * value_filt_ant1[filter_number]));
	value_ant1[filter_number] = input_value;
	value_filt_ant1[filter_number] = value_filt[filter_number];
	return value_filt[filter_number];
}

float filter_500hz(float input_value, int filter_number) {
	//Filtro a 500Hz primeira ordem: coeficientes obtidos em filtro.m
	//Values(i) = (b(1)*signal(i)+b(2)*signal(i-1)-a(2)*values(i-1))/a(1);

	//A1 = 1
	//A2 = -0.726542528005361
	//B1 = 0.136728735997320
	//B2 = 0.136728735997320
	//value_filt[filter_number] = ( (B1*input_value + B2*value_ant1[filter_number] - A2*value_filt_ant1[filter_number]));
	value_filt[filter_number] = ((0.136728735997320 * input_value + 0.136728735997320 * value_ant1[filter_number] + 0.726542528005361 * value_filt_ant1[filter_number]));
	value_ant1[filter_number] = input_value;
	value_filt_ant1[filter_number] = value_filt[filter_number];
	return value_filt[filter_number];
}


void abc_AB(float *abc, float *AB){
	// Conventional conversion into orthogonal components
	*AB=K23*(*abc-0.5f**(abc+1)-0.5f**(abc+2));
	*(AB+1)=K23*(Ksqr32**(abc+1)-Ksqr32**(abc+2));
}

void abc_AB_Dy(float *abc, float *AB){
	// Conversion into orthogonal components converting triangle to star
	*AB=K23sqr3*(Ksqr32**abc-Ksqr32**(abc+2));
	*(AB+1)=K23sqr3*(-0.5f**abc+*(abc+1)-0.5f**(abc+2));
}
